#include "xparameters.h"
#include "xgpio.h"
#include "signal_ip.h"
/**************************** user definitions ********************************/
#define CHANNEL 1
//Cordic processor base addres redefinition
#define SIGNAL_BASE_ADDR XPAR_SIGNAL_IP_0_S00_AXI_BASEADDR
//Cordic processor registers' offset redefinition
#define CONTROL_REG_OFFSET CORDIC_IP_S00_AXI_SLV_REG0_OFFSET
#define A_REG_OFFSET CORDIC_IP_S00_AXI_SLV_REG1_OFFSET
#define STATUS_REG_OFFSET CORDIC_IP_S00_AXI_SLV_REG2_OFFSET
#define RESULT_REG_OFFSET CORDIC_IP_S00_AXI_SLV_REG3_OFFSET
#define B_REG_OFFSET CORDIC_IP_S00_AXI_SLV_REG4_OFFSET
#define C_REG_OFFSET CORDIC_IP_S00_AXI_SLV_REG5_OFFSET
#define R_REG_OFFSET CORDIC_IP_S00_AXI_SLV_REG6_OFFSET
#define RESULT_REG_RE(param) ((u32)param & (u32)(0x00000FFF))
#define RESULT_REG_IM(param) (((u32)param & (u32)(0x0FFF0000)) >> 16 )
/***************************** Main function *********************************/
int main(){
int status;
XGpio AGpio, BGpio, CGpio, RGpio, ReGpio, ImGpio;
u32 data;
u32 result, sin, cos;
/* Initialize driver for the input angle GPIOe */
status = XGpio_Initialize(&angleGpio, XPAR_AXI_GPIO_ANGLE_DEVICE_ID);
if (status != XST_SUCCESS) {
goto FAILURE;
}
XGpio_SetDataDirection(&angleGpio, CHANNEL, 0xFFF);
/* Initialize driver for the output sin GPIO */
status = XGpio_Initialize(&ReGpio, XPAR_AXI_GPIO_SIN_DEVICE_ID);
if (status != XST_SUCCESS) {
goto FAILURE;
}
XGpio_SetDataDirection(&sinGpio, CHANNEL, 0x000);
/* Initialize driver for the output sin GPIO */
status = XGpio_Initialize(&cosGpio, XPAR_AXI_GPIO_COS_DEVICE_ID);
if (status != XST_SUCCESS) {
goto FAILURE;
}
XGpio_SetDataDirection(&ImGpio, CHANNEL, 0x000);
//Read angle binary data from angle GPIO. fxp(12:10) format
data = XGpio_DiscreteRead(&AGpio, CHANNEL);
data = XGpio_DiscreteRead(&BGpio, CHANNEL);
data = XGpio_DiscreteRead(&CGpio, CHANNEL);
data = XGpio_DiscreteRead(&RGpio, CHANNEL);
//Send data to data register of cordic processor.
//For the slv_regN register offset look into cordic driver header file: cordic_ip.h
CORDIC_IP_mWriteReg(SIGNAL_BASE_ADDR, A_REG_OFFSET, data);
//Start cordic processor - pulse start bit in control register
CORDIC_IP_mWriteReg(SIGNAL_BASE_ADDR, CONTROL_REG_OFFSET, 1);
CORDIC_IP_mWriteReg(SIGNAL_BASE_ADDR, CONTROL_REG_OFFSET, 0);

//Wait for ready bit in status register
while( (CORDIC_IP_mReadReg(CORDIC_BASE_ADDR, STATUS_REG_OFFSET) & 0x01) == 0);
//Get results
result = CORDIC_IP_mReadReg(CORDIC_BASE_ADDR, RESULT_REG_OFFSET);
//Extract sin and cos from 32-bit register data
Re = RESULT_REG_SIN( result );
Im = RESULT_REG_COS( result );
//Send to GPIO
XGpio_DiscreteWrite(&ReGpio, CHANNEL, Re);
XGpio_DiscreteWrite(&ImGpio, CHANNEL, Im);
/* Failure or end trap */
FAILURE:
while(1);
}

